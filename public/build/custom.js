(self["webpackChunk"] = self["webpackChunk"] || []).push([["custom"],{

/***/ "./assets/js/custom.js":
/*!*****************************!*\
  !*** ./assets/js/custom.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! core-js/modules/es.array.for-each.js */ "./node_modules/core-js/modules/es.array.for-each.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/web.dom-collections.for-each.js */ "./node_modules/core-js/modules/web.dom-collections.for-each.js");
/* animate efflects */

document.addEventListener("DOMContentLoaded", function () {
  var elementsToAnimate = document.querySelectorAll('.animated-element');
  window.addEventListener('scroll', function () {
    elementsToAnimate.forEach(function (element) {
      if (isInViewport(element)) {
        startAnimation(element);
      } else {
        stopAnimation(element);
      }
    });
  });
});
function isInViewport(element) {
  var rect = element.getBoundingClientRect();
  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}
function startAnimation(element) {
  element.classList.add('animate__animated', 'animate__heartBeat');
}
function stopAnimation(element) {
  element.classList.remove('animate__animated', 'animate__heartBeat');
}
document.addEventListener("DOMContentLoaded", function () {
  var scrollLinks = document.querySelectorAll('.smooth-scroll');
  scrollLinks.forEach(function (scrollLink) {
    scrollLink.addEventListener('click', smoothScroll);
  });
  function smoothScroll(e) {
    e.preventDefault();
    var targetId = this.getAttribute('href');
    var targetElement = document.querySelector(targetId);
    var currentPage = this.getAttribute('data-current-page');
    if (currentPage !== targetId.substring(1)) {
      var scrollOptions = {
        top: targetElement.offsetTop,
        behavior: 'smooth',
        duration: 1500
      };
      window.scrollTo(scrollOptions);
    }
  }
});

/* animate efflects */

/* readMore */

document.addEventListener('DOMContentLoaded', function () {
  var moreTextButtons = document.querySelectorAll('.moreText');
  moreTextButtons.forEach(function (button) {
    button.addEventListener('click', function (event) {
      var truncatedText = this.parentElement.querySelector('.txtSecondDiv');

      // Toggle la classe 'truncatedText'
      truncatedText.classList.toggle('truncatedText');

      // Si le texte est tronqué, supprime le backgroundColor blanc
      if (truncatedText.classList.contains('truncatedText')) {
        truncatedText.style.backgroundColor = ''; // Supprime le backgroundColor
      } else {
        truncatedText.style.backgroundColor = 'white'; // Définit le backgroundColor à blanc
      }

      // Masque le lien "Lire la suite" après avoir cliqué
      this.style.display = 'none';

      // Empêche la propagation de l'événement au document global
      event.stopPropagation();
    });
  });

  // Ajoute un écouteur de clic sur tout le document
  document.addEventListener('click', function (event) {
    // Réinitialise le texte tronqué et le backgroundColor
    moreTextButtons.forEach(function (button) {
      var truncatedText = button.parentElement.querySelector('.txtSecondDiv');
      truncatedText.classList.add('truncatedText'); // Ajoute la classe 'truncatedText' pour tronquer le texte
      truncatedText.style.backgroundColor = ''; // Supprime le backgroundColor blanc
      button.style.display = 'block'; // Affiche à nouveau tous les boutons "Lire la suite"
    });
  });
});
/* end of readMore */

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_core-js_modules_es_array_for-each_js-node_modules_core-js_modules_es_obj-7bb33f"], () => (__webpack_exec__("./assets/js/custom.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,